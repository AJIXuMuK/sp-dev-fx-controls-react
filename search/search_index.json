{
    "docs": [
        {
            "location": "/", 
            "text": "Reusable React components for the SharePoint Framework solutions\n\n\nThis repository provides developers with a set of reusable React components that can be used in SharePoint Framework (SPFx) solutions.\n\n\nGetting started\n\n\nCheck out how to get started here: \nGetting started\n.\n\n\nAvailable components\n\n\nThe following components are currently available:\n\n\n\n\nFileTypeIcon\n (Component that shows the icon of a specified file path or application)\n\n\nListView\n (List view component)\n\n\nPlaceholder\n (Component that can be used to show an initial placeholder if the web part has to be configured)\n\n\nSiteBreadcrumb\n (Breadcrumb component)", 
            "title": "Home"
        }, 
        {
            "location": "/#reusable-react-components-for-the-sharepoint-framework-solutions", 
            "text": "This repository provides developers with a set of reusable React components that can be used in SharePoint Framework (SPFx) solutions.", 
            "title": "Reusable React components for the SharePoint Framework solutions"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Check out how to get started here:  Getting started .", 
            "title": "Getting started"
        }, 
        {
            "location": "/#available-components", 
            "text": "The following components are currently available:   FileTypeIcon  (Component that shows the icon of a specified file path or application)  ListView  (List view component)  Placeholder  (Component that can be used to show an initial placeholder if the web part has to be configured)  SiteBreadcrumb  (Breadcrumb component)", 
            "title": "Available components"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting started\n\n\nInstallation\n\n\nTo get started you have to install the following dependency to your project: \n@pnp/spfx-controls-react\n.\n\n\nEnter the following command to install the dependency to your project:\n\n\nnpm install @pnp/spfx-controls-react --save --save-exact\n\n\n\n\nConfiguration\n\n\nOnce the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the \nconfig/config.json\n and adding the following line to the \nlocalizedResources\n property:\n\n\nControlStrings\n: \n./node_modules/@pnp/spfx-controls-react/lib/loc/{locale}.js\n\n\n\n\n\nNext Steps\n\n\nOnce you installed the dependency you can start using the components in your solution. Go to the homepage of the documentation to get an overview of all the available components: \nhome\n.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#installation", 
            "text": "To get started you have to install the following dependency to your project:  @pnp/spfx-controls-react .  Enter the following command to install the dependency to your project:  npm install @pnp/spfx-controls-react --save --save-exact", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/#configuration", 
            "text": "Once the package is installed, you will have to configure the resource file of the property controls to be used in your project. You can do this by opening the  config/config.json  and adding the following line to the  localizedResources  property:  ControlStrings :  ./node_modules/@pnp/spfx-controls-react/lib/loc/{locale}.js", 
            "title": "Configuration"
        }, 
        {
            "location": "/getting-started/#next-steps", 
            "text": "Once you installed the dependency you can start using the components in your solution. Go to the homepage of the documentation to get an overview of all the available components:  home .", 
            "title": "Next Steps"
        }, 
        {
            "location": "/controls/FileTypeIcon/", 
            "text": "FileTypeIcon component\n\n\nThis component returns the file type icon based on a specified file path or application.\n\n\n\n\nHow to use this component in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/dev-controls\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport { FileTypeIcon, ApplicationType, IconType, ImageSize } from \n@pnp/spfx-controls-react/lib/FileTypeIcon\n;\n\n\n\n\n\n\nUse the \nFileTypeIcon\n component in your code as follows:\n\n\n\n\n/* Showing the icons font */\n\nFileTypeIcon type={IconType.font} application={ApplicationType.Word} /\n\n\nFileTypeIcon type={IconType.font} application={ApplicationType.Excel} /\n\n\nFileTypeIcon type={IconType.font} path=\nhttps://contoso.sharepoint.com/documents/filename.docx\n /\n\n\nFileTypeIcon type={IconType.font} path=\nhttps://contoso.sharepoint.com/documents/filename.xslx\n /\n\n\n/* Showing the icon image */\n\nFileTypeIcon type={IconType.image} application={ApplicationType.Word} /\n\n\nFileTypeIcon type={IconType.image} path=\nhttps://contoso.sharepoint.com/documents/filename.docx\n /\n\n\n/* Icon image allows three different sizes */\n\nFileTypeIcon type={IconType.image} size={ImageSize.small} application={ApplicationType.Excel} /\n\n\nFileTypeIcon type={IconType.image} size={ImageSize.medium} application={ApplicationType.Excel} /\n\n\nFileTypeIcon type={IconType.image} size={ImageSize.large} application={ApplicationType.Excel} /\n\n\n\n\n\nImplementation\n\n\nThe FileTypeIcon component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napplication\n\n\nApplicationType\n\n\nno\n\n\nType of the application for which you want to show the icon. Use the \nApplicationType\n enum to get the list of available applications.\n\n\n\n\n\n\npath\n\n\nstring\n\n\nno\n\n\nPath to the document. If this is provided, the component will use the file extension to display the corresponding icon.\n\n\n\n\n\n\nsize\n\n\nImageSize\n\n\nno\n\n\nThis is a property that only needs to be used when the type is set to image. It allows you to specify the image size. Small (16px), medium (48px) and large (96px) are possible. Use the \nImageSize\n enum to get the list of available images sizes.\n\n\n\n\n\n\ntype\n\n\nIconType\n\n\nyes\n\n\nThis property specifies is you want to use the icon font or image. Use the \nIconType\n enum to get the list of available icon types.", 
            "title": "FileTypeIcon"
        }, 
        {
            "location": "/controls/FileTypeIcon/#filetypeicon-component", 
            "text": "This component returns the file type icon based on a specified file path or application.", 
            "title": "FileTypeIcon component"
        }, 
        {
            "location": "/controls/FileTypeIcon/#how-to-use-this-component-in-your-solutions", 
            "text": "Check that you installed the  @pnp/dev-controls  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import { FileTypeIcon, ApplicationType, IconType, ImageSize } from  @pnp/spfx-controls-react/lib/FileTypeIcon ;   Use the  FileTypeIcon  component in your code as follows:   /* Showing the icons font */ FileTypeIcon type={IconType.font} application={ApplicationType.Word} /  FileTypeIcon type={IconType.font} application={ApplicationType.Excel} /  FileTypeIcon type={IconType.font} path= https://contoso.sharepoint.com/documents/filename.docx  /  FileTypeIcon type={IconType.font} path= https://contoso.sharepoint.com/documents/filename.xslx  / \n\n/* Showing the icon image */ FileTypeIcon type={IconType.image} application={ApplicationType.Word} /  FileTypeIcon type={IconType.image} path= https://contoso.sharepoint.com/documents/filename.docx  / \n\n/* Icon image allows three different sizes */ FileTypeIcon type={IconType.image} size={ImageSize.small} application={ApplicationType.Excel} /  FileTypeIcon type={IconType.image} size={ImageSize.medium} application={ApplicationType.Excel} /  FileTypeIcon type={IconType.image} size={ImageSize.large} application={ApplicationType.Excel} /", 
            "title": "How to use this component in your solutions"
        }, 
        {
            "location": "/controls/FileTypeIcon/#implementation", 
            "text": "The FileTypeIcon component can be configured with the following properties:     Property  Type  Required  Description      application  ApplicationType  no  Type of the application for which you want to show the icon. Use the  ApplicationType  enum to get the list of available applications.    path  string  no  Path to the document. If this is provided, the component will use the file extension to display the corresponding icon.    size  ImageSize  no  This is a property that only needs to be used when the type is set to image. It allows you to specify the image size. Small (16px), medium (48px) and large (96px) are possible. Use the  ImageSize  enum to get the list of available images sizes.    type  IconType  yes  This property specifies is you want to use the icon font or image. Use the  IconType  enum to get the list of available icon types.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/ListView/", 
            "text": "ListView component\n\n\nThis component renders a list view for the given set of items.\n\n\n\n\nList view control with grouping applied\n\n\n\n\nHow to use this component in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/dev-controls\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport { ListView, IViewField, SelectionMode, GroupOrder, IGrouping } from \n@pnp/spfx-controls-react/lib/ListView\n;\n\n\n\n\n\n\nUse the \nListView\n component in your code as follows:\n\n\n\n\nListView\n  items={items}\n  viewFields={viewFields}\n  iconFieldName=\nServerRelativeUrl\n\n  compact={true}\n  selectionMode={SelectionMode.multiple}\n  selection={this._getSelection}\n  groupByFields={groupByFields} /\n\n\n\n\n\n\n\nWith the \nselection\n property you can define a method that which gets called when the user selects one or more items in the list view:\n\n\n\n\nprivate _getSelection(items: any[]) {\n  console.log('Selected items:', items);\n}\n\n\n\n\n\n\nWith the \ngroupByFields\n property you can define an array of field objects which will be used for grouping. \n\n\n\n\nImportant\n: the same order of the fields defines how grouping will be applied. In the snippet the \nListView\n control will first group by the \nExtension\n and after that by the \nAuthor\n field.\n\n\nconst groupByFields: IGrouping[] = [\n  {\n    name: \nExtension\n, \n    order: GroupOrder.ascending \n  }, {\n    name: \nAuthor\n, \n    order: GroupOrder.descending\n  }\n];\n\n\n\n\nImplementation\n\n\nThe Placeholder component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\niconFieldName\n\n\nstring\n\n\nno\n\n\nSpecify the name of the file URL path which will be used to show the file icon.\n\n\n\n\n\n\nitems\n\n\nany[]\n\n\nyes\n\n\nItems to render in the list view.\n\n\n\n\n\n\nviewFields\n\n\nIViewField[]\n\n\nno\n\n\nThe fields you want to render in the list view. Check the \nIViewField\n implementation to see which properties you can define.\n\n\n\n\n\n\ncompact\n\n\nboolean\n\n\nno\n\n\nBoolean value to indicate if the component should render in compact mode. By default this is set to \nfalse\n.\n\n\n\n\n\n\nselectionMode\n\n\nSelectionMode\n\n\nno\n\n\nSpecify if the items in the list view can be selected and how. Options are: none, single, multi.\n\n\n\n\n\n\nselection\n\n\nfunction\n\n\nno\n\n\nSelection event that passes the selected item(s) from the list view.\n\n\n\n\n\n\ngroupByFields\n\n\nIGrouping[]\n\n\nno\n\n\nDefines the field on which you want to group the items in the list view.\n\n\n\n\n\n\n\n\nThe \nIViewField\n has the following implementation:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nyes\n\n\nName of the field.\n\n\n\n\n\n\ndisplayName\n\n\nstring\n\n\nno\n\n\nName that will be used as the column title. If not defined, the name property will be used.\n\n\n\n\n\n\nlinkPropertyName\n\n\nstring\n\n\nno\n\n\nSpecify the field name that needs to be used to render a link for the current field.\n\n\n\n\n\n\nsorting\n\n\nboolean\n\n\nno\n\n\nSpecify if you want to enable sorting for the current field.\n\n\n\n\n\n\nmaxWidth\n\n\nnumber\n\n\nno\n\n\nSpecify the minimum width of the column.\n\n\n\n\n\n\nmaxWidth\n\n\nnumber\n\n\nno\n\n\nSpecify the maximum width of the column.\n\n\n\n\n\n\nrender\n\n\nfunction\n\n\nno\n\n\nOverride how the field has to get rendered.\n\n\n\n\n\n\n\n\nThe \nIGrouping\n has the following implementation:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nyes\n\n\nName of the field\n\n\n\n\n\n\norder\n\n\nGroupOrder\n\n\nyes\n\n\nSpecify how the group needs to be ordered.\n\n\n\n\n\n\n\n\nenum \nGroupOrder\n\n\n\n\n\n\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nascending\n\n\nOrder the group in ascending order.\n\n\n\n\n\n\ndescending\n\n\nOrder the group in descending order.", 
            "title": "ListView"
        }, 
        {
            "location": "/controls/ListView/#listview-component", 
            "text": "This component renders a list view for the given set of items.   List view control with grouping applied", 
            "title": "ListView component"
        }, 
        {
            "location": "/controls/ListView/#how-to-use-this-component-in-your-solutions", 
            "text": "Check that you installed the  @pnp/dev-controls  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import { ListView, IViewField, SelectionMode, GroupOrder, IGrouping } from  @pnp/spfx-controls-react/lib/ListView ;   Use the  ListView  component in your code as follows:   ListView\n  items={items}\n  viewFields={viewFields}\n  iconFieldName= ServerRelativeUrl \n  compact={true}\n  selectionMode={SelectionMode.multiple}\n  selection={this._getSelection}\n  groupByFields={groupByFields} /    With the  selection  property you can define a method that which gets called when the user selects one or more items in the list view:   private _getSelection(items: any[]) {\n  console.log('Selected items:', items);\n}   With the  groupByFields  property you can define an array of field objects which will be used for grouping.    Important : the same order of the fields defines how grouping will be applied. In the snippet the  ListView  control will first group by the  Extension  and after that by the  Author  field.  const groupByFields: IGrouping[] = [\n  {\n    name:  Extension , \n    order: GroupOrder.ascending \n  }, {\n    name:  Author , \n    order: GroupOrder.descending\n  }\n];", 
            "title": "How to use this component in your solutions"
        }, 
        {
            "location": "/controls/ListView/#implementation", 
            "text": "The Placeholder component can be configured with the following properties:     Property  Type  Required  Description      iconFieldName  string  no  Specify the name of the file URL path which will be used to show the file icon.    items  any[]  yes  Items to render in the list view.    viewFields  IViewField[]  no  The fields you want to render in the list view. Check the  IViewField  implementation to see which properties you can define.    compact  boolean  no  Boolean value to indicate if the component should render in compact mode. By default this is set to  false .    selectionMode  SelectionMode  no  Specify if the items in the list view can be selected and how. Options are: none, single, multi.    selection  function  no  Selection event that passes the selected item(s) from the list view.    groupByFields  IGrouping[]  no  Defines the field on which you want to group the items in the list view.     The  IViewField  has the following implementation:     Property  Type  Required  Description      name  string  yes  Name of the field.    displayName  string  no  Name that will be used as the column title. If not defined, the name property will be used.    linkPropertyName  string  no  Specify the field name that needs to be used to render a link for the current field.    sorting  boolean  no  Specify if you want to enable sorting for the current field.    maxWidth  number  no  Specify the minimum width of the column.    maxWidth  number  no  Specify the maximum width of the column.    render  function  no  Override how the field has to get rendered.     The  IGrouping  has the following implementation:     Property  Type  Required  Description      name  string  yes  Name of the field    order  GroupOrder  yes  Specify how the group needs to be ordered.     enum  GroupOrder     Value  Description      ascending  Order the group in ascending order.    descending  Order the group in descending order.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/Placeholder/", 
            "text": "Placeholder component\n\n\nThis component renders a placeholder which can be used to show a message that the web part still has to be configured.\n\n\n\n\nHow to use this component in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/dev-controls\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport { Placeholder } from \n@pnp/spfx-controls-react/lib/Placeholder\n;\n\n\n\n\n\n\nUse the \nPlaceholder\n component in your code as follows:\n\n\n\n\nPlaceholder\n  iconName='Edit'\n  iconText='Configure your web part'\n  description='Please configure the web part.'\n  buttonLabel='Configure'\n  onConfigure={this._onConfigure} /\n\n\n\n\n\n\n\nWith the \nonConfigure\n property you can define what it needs to do when you click on the button. Like for example opening the property pane:\n\n\n\n\nprivate _onConfigure() {\n  // Context of the web part\n  this.props.context.propertyPane.open();\n}\n\n\n\n\nImplementation\n\n\nThe placeholder component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuttonLabel\n\n\nstring\n\n\nno\n\n\nText label to be displayed on the button bellow the description. The button is optional.\n\n\n\n\n\n\ncontentClassName\n\n\nstring\n\n\nno\n\n\nThis is the className that is applied to the root element of the content zone. You can use this to apply custom styles to the placeholder.\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\nyes\n\n\nText description for the placeholder. This appears bellow the Icon and IconText.\n\n\n\n\n\n\niconName\n\n\nstring\n\n\nyes\n\n\nThe name of the icon that will be used in the placeholder. This is the same name as you can find on the Office UI Fabric icons page: \nOffice UI Fabric icons\n. For example: \nPage\n or \nAdd\n.\n\n\n\n\n\n\niconText\n\n\nstring\n\n\nyes\n\n\nHeading text which is displayed next to the icon.\n\n\n\n\n\n\nonConfigure\n\n\nfunction\n\n\nno\n\n\nonConfigure handler for the button. The button is optional.", 
            "title": "Placeholder"
        }, 
        {
            "location": "/controls/Placeholder/#placeholder-component", 
            "text": "This component renders a placeholder which can be used to show a message that the web part still has to be configured.", 
            "title": "Placeholder component"
        }, 
        {
            "location": "/controls/Placeholder/#how-to-use-this-component-in-your-solutions", 
            "text": "Check that you installed the  @pnp/dev-controls  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import { Placeholder } from  @pnp/spfx-controls-react/lib/Placeholder ;   Use the  Placeholder  component in your code as follows:   Placeholder\n  iconName='Edit'\n  iconText='Configure your web part'\n  description='Please configure the web part.'\n  buttonLabel='Configure'\n  onConfigure={this._onConfigure} /    With the  onConfigure  property you can define what it needs to do when you click on the button. Like for example opening the property pane:   private _onConfigure() {\n  // Context of the web part\n  this.props.context.propertyPane.open();\n}", 
            "title": "How to use this component in your solutions"
        }, 
        {
            "location": "/controls/Placeholder/#implementation", 
            "text": "The placeholder component can be configured with the following properties:     Property  Type  Required  Description      buttonLabel  string  no  Text label to be displayed on the button bellow the description. The button is optional.    contentClassName  string  no  This is the className that is applied to the root element of the content zone. You can use this to apply custom styles to the placeholder.    description  string  yes  Text description for the placeholder. This appears bellow the Icon and IconText.    iconName  string  yes  The name of the icon that will be used in the placeholder. This is the same name as you can find on the Office UI Fabric icons page:  Office UI Fabric icons . For example:  Page  or  Add .    iconText  string  yes  Heading text which is displayed next to the icon.    onConfigure  function  no  onConfigure handler for the button. The button is optional.", 
            "title": "Implementation"
        }, 
        {
            "location": "/controls/SiteBreadcrumb/", 
            "text": "SiteBreadcrumb component\n\n\nThis component returns a breadcrumb based on the current location.\n\n\n\n\n\n\nHow to use this component in your solutions\n\n\n\n\nCheck that you installed the \n@pnp/dev-controls\n dependency. Check out the \ngetting started\n page for more information about installing the dependency.\n\n\nImport the following modules to your component:\n\n\n\n\nimport { SiteBreadcrumb } from \n@pnp/spfx-controls-react/lib/SiteBreadcrumb\n;\n\n\n\n\n\n\nUse the \nSiteBreadcrumb\n component in your code as follows:\n\n\n\n\nSiteBreadcrumb context={this.props.context} /\n\n\n\n\n\nImplementation\n\n\nThe SiteBreadcrumb component can be configured with the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontext\n\n\nWebPartContext OR ApplicationCustomizerContext\n\n\nyes\n\n\nPass the context of your web part or application customizer extension.", 
            "title": "SiteBreadcrumb"
        }, 
        {
            "location": "/controls/SiteBreadcrumb/#sitebreadcrumb-component", 
            "text": "This component returns a breadcrumb based on the current location.", 
            "title": "SiteBreadcrumb component"
        }, 
        {
            "location": "/controls/SiteBreadcrumb/#how-to-use-this-component-in-your-solutions", 
            "text": "Check that you installed the  @pnp/dev-controls  dependency. Check out the  getting started  page for more information about installing the dependency.  Import the following modules to your component:   import { SiteBreadcrumb } from  @pnp/spfx-controls-react/lib/SiteBreadcrumb ;   Use the  SiteBreadcrumb  component in your code as follows:   SiteBreadcrumb context={this.props.context} /", 
            "title": "How to use this component in your solutions"
        }, 
        {
            "location": "/controls/SiteBreadcrumb/#implementation", 
            "text": "The SiteBreadcrumb component can be configured with the following properties:     Property  Type  Required  Description      context  WebPartContext OR ApplicationCustomizerContext  yes  Pass the context of your web part or application customizer extension.", 
            "title": "Implementation"
        }, 
        {
            "location": "/about/release-notes/", 
            "text": "Releases\n\n\nBeta 1.0.0-beta.8\n\n\n\n\nBug fix\n: bug fix for the \nListView\n control when selection is used in combination with \nsetState\n.\n\n\n\n\nBeta 1.0.0-beta.7\n\n\nAdded\n\n- Grouping functionality added to the \nListView\n control\n\n\nBeta 1.0.0-beta.6\n\n\n\n\nInitial release", 
            "title": "Release notes"
        }, 
        {
            "location": "/about/release-notes/#releases", 
            "text": "", 
            "title": "Releases"
        }, 
        {
            "location": "/about/release-notes/#beta-100-beta8", 
            "text": "Bug fix : bug fix for the  ListView  control when selection is used in combination with  setState .", 
            "title": "Beta 1.0.0-beta.8"
        }, 
        {
            "location": "/about/release-notes/#beta-100-beta7", 
            "text": "Added \n- Grouping functionality added to the  ListView  control", 
            "title": "Beta 1.0.0-beta.7"
        }, 
        {
            "location": "/about/release-notes/#beta-100-beta6", 
            "text": "Initial release", 
            "title": "Beta 1.0.0-beta.6"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\n\nCopyright (c) Microsoft Corporation. All rights reserved.\n\n\nMIT License\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}